class UaS_FieldSurgeryKit : HDWeapon {
	int currentWound;
	int currentTool;
	string statusMessage, currentMessage;

	enum ToolModes {
		T_PAINKILLER,
		T_FORCEPS,
		T_SALINE,
		T_BIOFOAM,
		T_STAPLER,
		T_SUTURES,
		T_2F,
	}

	Default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a portable field surgery kit.";
		Inventory.Icon "ROCKA0";
		Scale 0.5;
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		//+WEAPON.NOAUTOFIRE;
	}

	override double, int weaponbulk() {
		return 10,0;
	}

	override void DoEffect() {
		super.DoEffect();
		if ((owner.player.cmd.buttons & BT_USER2) && !(owner.player.oldbuttons & BT_USER2)) { CycleTool(); }

		statusMessage = "\cyField Medical Kit\n\n";
		switch (currentTool) {
			case T_PAINKILLER:
				statusMessage = statusmessage.."\cjAnaesthetic\n";
				statusMessage = statusmessage.."\cuFast-acting local painkiller.\n";
				break;
			case T_FORCEPS:
				statusMessage = statusmessage.."\cjForcepts\n";
				statusMessage = statusmessage.."\cuPrecision .\n";
				break;
			case T_SALINE:
				statusMessage = statusmessage.."\cjSaline\n";
				statusMessage = statusmessage.."\cuSterile flushing/cleaning solution.\n";
				break;
			case T_BIOFOAM:
				statusMessage = statusmessage.."\cjBiofoam\n";
				statusMessage = statusmessage.."\cuAbsorbant antispetic flesh-analogue.\n";
				break;
			case T_STAPLER:
				statusMessage = statusmessage.."\cjStapler\n";
				statusMessage = statusmessage.."\cuManual hand-stapler.\n";
				break;
			case T_SUTURES:
				statusMessage = statusmessage.."\cjSutures\n";
				statusMessage = statusmessage.."\cuHook needle and biodegradable thread.\n";
				break;
			case T_2F:
				statusMessage = statusmessage.."\cjSecond Flesh\n";
				statusMessage = statusmessage.."\cuAdvanced stem cell and nutrient cocktail.\n";
				break;
		}

		statusMessage = statusMessage.."\n\n";
		statusMessage = statusMessage.."\crTreating\n";
		if (currentWound == 0) { statusMessage = statusMessage.."\cu-----\n"; }
		else if (currentWound >= 1 && currentWound <= 2) { statusMessage = statusMessage.."\cgSmall wound\n"; }
		else if (currentWound >= 3 && currentWound <= 4) { statusMessage = statusMessage.."\cgModerate wound\n"; }
		else if (currentWound >= 5) { statusMessage = statusMessage.."\cgLarge wound\n"; }

		if ((owner.player.cmd.buttons & BT_ATTACK) && !(owner.player.oldbuttons & BT_ATTACK)) { OpenWound(); }
		if ((owner.player.cmd.buttons & BT_USER1) && !(owner.player.oldbuttons & BT_USER1)) { DebugGiveWounds(); }

		statusMessage = statusMessage.."\n"..currentMessage;

		DebugStatus();

		A_WeaponMessage(statusMessage);
	}

	void CycleTool() {
		currentTool++;
		if (CurrentTool > T_2F) { CurrentTool = T_PAINKILLER; }
	}

	void OpenWound() {
		if (!owner) { return; }
		let ownr = HDPlayerPawn(owner);

		if (currentWound > 0) {
			currentMessage = "Opened the wound wider.\n";
			ownr.A_PlaySound("imp/melee", CHAN_WEAPON, 0.1);
			currentWound++;
			ownr.woundcount++;
			return;
		}
		else if (ownr.unstablewoundcount <= 0) {
			currentMessage = "You have no bandaged wounds.\n";
			return;
		}
		else {
			currentWound = min(random(1, 5), ownr.unstablewoundcount);
			ownr.woundcount += currentWound;
			ownr.unstablewoundcount -= currentWound;
			currentMessage = "Opened previously bandaged wound.\n";
			ownr.A_PlaySound("imp/melee", CHAN_WEAPON, 0.1);
		}
	}

	void DebugStatus() {
		if (!owner) { return; }
		let ownr = HDPlayerPawn(owner);
		statusMessage = statusMessage.."Open Wounds "..ownr.woundcount.."\n";
		statusMessage = statusMessage.."Unstable Wounds "..ownr.unstablewoundcount.."\n";
		statusMessage = statusMessage.."Old Wounds "..ownr.oldwoundcount.."\n";
	}

	void DebugGiveWounds() {
		if (!owner) { return; }
		let ownr = HDPlayerPawn(owner);

		ownr.woundcount = random(1, 5);
		statusMessage = statusMessage.."Gave Wounds!\n";
	}
}

class UaS_WoundDummy : Actor {
	Default {
		Radius 8;
		Height 16;
		+NOGRAVITY;
	}

	States {
		Spawn:
			BLUD D 1;
			Loop;
	}
}
